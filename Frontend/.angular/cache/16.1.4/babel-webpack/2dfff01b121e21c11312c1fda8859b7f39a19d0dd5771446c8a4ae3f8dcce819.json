{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport var UserRole;\n(function (UserRole) {\n  UserRole[\"Admin\"] = \"admin\";\n  UserRole[\"TrainingHead\"] = \"traininghead\";\n  // Add more roles if needed\n})(UserRole || (UserRole = {}));\nexport class AuthserviceService {\n  constructor() {\n    this.tokenKey = 'accessToken'; // Key for storing the token in local storage\n  }\n  // Save the token to local storage\n  saveToken(token) {\n    localStorage.setItem(this.tokenKey, token);\n  }\n  // Get the token from local storage\n  getToken() {\n    return localStorage.getItem(this.tokenKey);\n  }\n  // Remove the token from local storage (on logout)\n  removeToken() {\n    localStorage.removeItem(this.tokenKey);\n  }\n  // Check if the user is logged in based on the token's existence and validity\n  isLoggedIn() {\n    const token = this.getToken();\n    // Add your token validation logic here\n    return !!token;\n  }\n}\nAuthserviceService.ɵfac = function AuthserviceService_Factory(t) {\n  return new (t || AuthserviceService)();\n};\nAuthserviceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthserviceService,\n  factory: AuthserviceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["UserRole","AuthserviceService","constructor","tokenKey","saveToken","token","localStorage","setItem","getToken","getItem","removeToken","removeItem","isLoggedIn","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ATHIRA\\Desktop\\New folder (2)\\Main_project-master\\Main_project-master\\Frontend\\src\\app\\shared\\authservice.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\nexport enum UserRole {\n  Admin = 'admin',\n  TrainingHead = 'traininghead',\n  // Add more roles if needed\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthserviceService {\n  private tokenKey = 'accessToken'; // Key for storing the token in local storage\n  constructor() { }\n\n\n\n  // Save the token to local storage\n  saveToken(token: string): void {\n    localStorage.setItem(this.tokenKey, token);\n  }\n\n  // Get the token from local storage\n  getToken(): string | null {\n    return localStorage.getItem(this.tokenKey);\n  }\n\n  // Remove the token from local storage (on logout)\n  removeToken(): void {\n    localStorage.removeItem(this.tokenKey);\n  }\n\n  // Check if the user is logged in based on the token's existence and validity\n  isLoggedIn(): boolean {\n    const token = this.getToken();\n    // Add your token validation logic here\n    return !!token;\n  }\n}\n\n  "],"mappings":";AAGA,WAAYA,QAIX;AAJD,WAAYA,QAAQ;EAClBA,QAAA,mBAAe;EACfA,QAAA,iCAA6B;EAC7B;AACF,CAAC,EAJWA,QAAQ,KAARA,QAAQ;AASpB,OAAM,MAAOC,kBAAkB;EAE7BC,YAAA;IADQ,KAAAC,QAAQ,GAAG,aAAa,CAAC,CAAC;EAClB;EAIhB;EACAC,SAASA,CAACC,KAAa;IACrBC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACJ,QAAQ,EAAEE,KAAK,CAAC;EAC5C;EAEA;EACAG,QAAQA,CAAA;IACN,OAAOF,YAAY,CAACG,OAAO,CAAC,IAAI,CAACN,QAAQ,CAAC;EAC5C;EAEA;EACAO,WAAWA,CAAA;IACTJ,YAAY,CAACK,UAAU,CAAC,IAAI,CAACR,QAAQ,CAAC;EACxC;EAEA;EACAS,UAAUA,CAAA;IACR,MAAMP,KAAK,GAAG,IAAI,CAACG,QAAQ,EAAE;IAC7B;IACA,OAAO,CAAC,CAACH,KAAK;EAChB;;AA1BWJ,kBAAkB,C;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB,C;SAAlBA,kBAAkB;EAAAY,OAAA,EAAlBZ,kBAAkB,CAAAa,IAAA;EAAAC,UAAA,EAFjB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}