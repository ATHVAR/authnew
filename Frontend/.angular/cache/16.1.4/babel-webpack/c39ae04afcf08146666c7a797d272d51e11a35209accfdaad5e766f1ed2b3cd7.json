{"ast":null,"code":"\"use strict\";\n\n// import { Injectable } from '@angular/core';\n// import { AuthserviceService,UserRole } from './authservice.service';\n// import { Router } from '@angular/router';\n// @Injectable({\n//   providedIn: 'root'\n// })\n// export class AuthguardService {\n//   constructor(private authService:AuthserviceService,private router:Router) { }\n//   loggedIn(): boolean {\n//     const token = localStorage.getItem('token');\n//     const userRole = localStorage.getItem('userRole');\n//     // Check if a valid token and user role are present\n//     if (token && (userRole === 'admin' || userRole === 'trainer head')) {\n//       return true;\n//     }\n//     // If not logged in or not authorized, show an alert and return false\n//     alert('Access Denied');\n//     return false;\n//   }\n// }\n// import { Injectable } from '@angular/core';\n// import { AuthserviceService, UserRole } from './authservice.service';\n// import { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\n// @Injectable({\n//   providedIn: 'root'\n// })\n// export class AuthguardService { private userRole!: UserRole;\n//   constructor(private authService: AuthserviceService, private router: Router) { }\n//   canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n//     const token = localStorage.getItem('token');\n//     const userRole = localStorage.getItem('userRole');\n//     // Check if a valid token and user role are present\n//     if (token && userRole) {\n//       const allowedRoles = route.data['allowedRoles'] as UserRole[];\n//       if (!allowedRoles || allowedRoles.includes(userRole as UserRole)) {\n//         return true; // User's role is allowed, grant access\n//       } else {\n//         // If not authorized, show an alert and redirect to unauthorized page or handle as needed\n//         alert('Access Denied');\n//         this.router.navigate(['/unauthorized']);\n//         return false;\n//       }\n//     } else {\n//       // If not logged in, redirect to login page\n//       this.router.navigate(['/login']);\n//       return false;\n//     }\n//   }\n// }","map":{"version":3,"names":[],"sources":["C:\\Users\\ATHIRA\\Desktop\\New folder (2)\\Main_project-master\\Main_project-master\\Frontend\\src\\app\\shared\\authguard.service.ts"],"sourcesContent":["// import { Injectable } from '@angular/core';\n// import { AuthserviceService,UserRole } from './authservice.service';\n// import { Router } from '@angular/router';\n\n// @Injectable({\n//   providedIn: 'root'\n// })\n// export class AuthguardService {\n\n//   constructor(private authService:AuthserviceService,private router:Router) { }\n\n//   loggedIn(): boolean {\n//     const token = localStorage.getItem('token');\n//     const userRole = localStorage.getItem('userRole');\n\n//     // Check if a valid token and user role are present\n//     if (token && (userRole === 'admin' || userRole === 'trainer head')) {\n//       return true;\n//     }\n\n//     // If not logged in or not authorized, show an alert and return false\n//     alert('Access Denied');\n//     return false;\n//   }\n// }\n// import { Injectable } from '@angular/core';\n// import { AuthserviceService, UserRole } from './authservice.service';\n// import { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\n\n// @Injectable({\n//   providedIn: 'root'\n// })\n// export class AuthguardService { private userRole!: UserRole;\n\n//   constructor(private authService: AuthserviceService, private router: Router) { }\n\n//   canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n//     const token = localStorage.getItem('token');\n//     const userRole = localStorage.getItem('userRole');\n\n//     // Check if a valid token and user role are present\n//     if (token && userRole) {\n//       const allowedRoles = route.data['allowedRoles'] as UserRole[];\n//       if (!allowedRoles || allowedRoles.includes(userRole as UserRole)) {\n//         return true; // User's role is allowed, grant access\n//       } else {\n//         // If not authorized, show an alert and redirect to unauthorized page or handle as needed\n//         alert('Access Denied');\n//         this.router.navigate(['/unauthorized']);\n//         return false;\n//       }\n//     } else {\n//       // If not logged in, redirect to login page\n//       this.router.navigate(['/login']);\n//       return false;\n//     }\n//   }\n// }\n\n"],"mappings":";;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script","externalDependencies":[]}