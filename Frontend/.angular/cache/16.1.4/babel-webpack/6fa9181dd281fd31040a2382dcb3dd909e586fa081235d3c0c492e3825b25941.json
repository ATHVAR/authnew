{"ast":null,"code":"import { UserRole } from './authservice.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./authservice.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthguardService {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n    this.userRole = UserRole.Default;\n  }\n  canActivate(route, state) {\n    const token = localStorage.getItem('token');\n    const userRole = localStorage.getItem('userRole');\n    // Check if a valid token and user role are present\n    if (token && userRole) {\n      const allowedRoles = route.data['allowedRoles'];\n      if (!allowedRoles || allowedRoles.includes(userRole)) {\n        return true; // User's role is allowed, grant access\n      } else {\n        // If not authorized, show an alert and redirect to unauthorized page or handle as needed\n        alert('Access Denied');\n        this.router.navigate(['/unauthorized']);\n        return false;\n      }\n    } else {\n      // If not logged in, redirect to login page\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n}\nAuthguardService.ɵfac = function AuthguardService_Factory(t) {\n  return new (t || AuthguardService)(i0.ɵɵinject(i1.AuthserviceService), i0.ɵɵinject(i2.Router));\n};\nAuthguardService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthguardService,\n  factory: AuthguardService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["UserRole","AuthguardService","constructor","authService","router","userRole","Default","canActivate","route","state","token","localStorage","getItem","allowedRoles","data","includes","alert","navigate","i0","ɵɵinject","i1","AuthserviceService","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ATHIRA\\Desktop\\New folder (2)\\Main_project-master\\Main_project-master\\Frontend\\src\\app\\shared\\authguard.service.ts"],"sourcesContent":["// import { Injectable } from '@angular/core';\n// import { AuthserviceService,UserRole } from './authservice.service';\n// import { Router } from '@angular/router';\n\n// @Injectable({\n//   providedIn: 'root'\n// })\n// export class AuthguardService {\n\n//   constructor(private authService:AuthserviceService,private router:Router) { }\n\n//   loggedIn(): boolean {\n//     const token = localStorage.getItem('token');\n//     const userRole = localStorage.getItem('userRole');\n\n//     // Check if a valid token and user role are present\n//     if (token && (userRole === 'admin' || userRole === 'trainer head')) {\n//       return true;\n//     }\n\n//     // If not logged in or not authorized, show an alert and return false\n//     alert('Access Denied');\n//     return false;\n//   }\n// }\nimport { Injectable } from '@angular/core';\nimport { AuthserviceService, UserRole } from './authservice.service';\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthguardService {private userRole: UserRole = UserRole.Default;\n\n  constructor(private authService: AuthserviceService, private router: Router) { }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    const token = localStorage.getItem('token');\n    const userRole = localStorage.getItem('userRole');\n\n    // Check if a valid token and user role are present\n    if (token && userRole) {\n      const allowedRoles = route.data['allowedRoles'] as UserRole[];\n      if (!allowedRoles || allowedRoles.includes(userRole as UserRole)) {\n        return true; // User's role is allowed, grant access\n      } else {\n        // If not authorized, show an alert and redirect to unauthorized page or handle as needed\n        alert('Access Denied');\n        this.router.navigate(['/unauthorized']);\n        return false;\n      }\n    } else {\n      // If not logged in, redirect to login page\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n}\n\n"],"mappings":"AA0BA,SAA6BA,QAAQ,QAAQ,uBAAuB;;;;AAMpE,OAAM,MAAOC,gBAAgB;EAE3BC,YAAoBC,WAA+B,EAAUC,MAAc;IAAvD,KAAAD,WAAW,GAAXA,WAAW;IAA8B,KAAAC,MAAM,GAANA,MAAM;IAF9B,KAAAC,QAAQ,GAAaL,QAAQ,CAACM,OAAO;EAEK;EAE/EC,WAAWA,CAACC,KAA6B,EAAEC,KAA0B;IACnE,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMP,QAAQ,GAAGM,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IAEjD;IACA,IAAIF,KAAK,IAAIL,QAAQ,EAAE;MACrB,MAAMQ,YAAY,GAAGL,KAAK,CAACM,IAAI,CAAC,cAAc,CAAe;MAC7D,IAAI,CAACD,YAAY,IAAIA,YAAY,CAACE,QAAQ,CAACV,QAAoB,CAAC,EAAE;QAChE,OAAO,IAAI,CAAC,CAAC;OACd,MAAM;QACL;QACAW,KAAK,CAAC,eAAe,CAAC;QACtB,IAAI,CAACZ,MAAM,CAACa,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC;QACvC,OAAO,KAAK;;KAEf,MAAM;MACL;MACA,IAAI,CAACb,MAAM,CAACa,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAO,KAAK;;EAEhB;;AAxBWhB,gBAAgB,C;mBAAhBA,gBAAgB,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,kBAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;AAAhBtB,gBAAgB,C;SAAhBA,gBAAgB;EAAAuB,OAAA,EAAhBvB,gBAAgB,CAAAwB,IAAA;EAAAC,UAAA,EAFf;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}